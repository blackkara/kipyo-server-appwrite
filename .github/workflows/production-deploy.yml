name: Production Deployment

on:
  pull_request:
    branches: [main]
    types: [closed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Sadece merged PR'lar i√ßin √ßalƒ±≈üƒ±r
  check-merge:
    name: Check if PR was merged
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      merged: ${{ github.event.pull_request.merged }}
    steps:
      - name: PR Merged Check
        run: echo "‚úÖ PR was merged, proceeding with deployment"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: check-merge
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run npm audit
        working-directory: ./backend
        run: |
          npm audit --audit-level=high
          echo "‚úÖ Security audit passed"

      - name: Dependency vulnerability check
        working-directory: ./backend
        run: |
          npm audit --audit-level=moderate --json > audit-report.json || true
          cat audit-report.json

  create-version:
    name: Create Version Tag
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Get version from package.json
        id: version
        working-directory: ./backend
        run: |
          VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          FULL_VERSION="v${VERSION}-${TIMESTAMP}"
          echo "version=${FULL_VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Version: ${FULL_VERSION}"

      - name: Create Git tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a ${{ steps.version.outputs.version }} -m "Production release ${{ steps.version.outputs.version }}"
          git push origin ${{ steps.version.outputs.version }}

  build-and-push:
    name: Build & Push Production Image
    runs-on: ubuntu-latest
    needs: [security-scan, create-version]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.create-version.outputs.version }}
            type=raw,value=production-latest
            type=sha,prefix=prod-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ needs.create-version.outputs.version }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, create-version]
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Deploy to production server
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "üì¶ Version: ${{ needs.create-version.outputs.version }}"
          echo ""
          echo "‚ÑπÔ∏è Production deployment configuration needed:"
          echo "   - Set PRODUCTION_SERVER_HOST in GitHub secrets"
          echo "   - Set PRODUCTION_SSH_KEY in GitHub secrets"
          echo "   - Configure deployment script"
          echo "   - Set up rollback mechanism"
          echo ""
          echo "üìù Example deployment command:"
          echo "   ssh user@production-server 'cd /app && docker-compose pull && docker-compose up -d'"

      # Ger√ßek production deployment i√ßin:
      # - name: Setup SSH
      #   uses: webfactory/ssh-agent@v0.8.0
      #   with:
      #     ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
      #
      # - name: Backup current version
      #   run: |
      #     ssh user@${{ secrets.PRODUCTION_SERVER_HOST }} << 'EOF'
      #       cd /app/kipyo-backend
      #       docker tag kipyo-backend:latest kipyo-backend:rollback-$(date +%Y%m%d-%H%M%S)
      #     EOF
      #
      # - name: Deploy new version
      #   run: |
      #     ssh user@${{ secrets.PRODUCTION_SERVER_HOST }} << 'EOF'
      #       cd /app/kipyo-backend
      #       docker-compose pull backend
      #       docker-compose up -d backend
      #       sleep 10
      #     EOF

      - name: Health check
        run: |
          echo "üè• Running production health check..."
          echo "‚ÑπÔ∏è Configure PRODUCTION_URL in repository variables"
          # Max 5 retries
          # for i in {1..5}; do
          #   if curl -f ${{ vars.PRODUCTION_URL }}/health; then
          #     echo "‚úÖ Health check passed"
          #     exit 0
          #   fi
          #   echo "‚è≥ Waiting 10 seconds before retry $i/5..."
          #   sleep 10
          # done
          # echo "‚ùå Health check failed after 5 retries"
          # exit 1

      - name: Smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          echo "‚ÑπÔ∏è Configure smoke tests for critical endpoints"
          # curl -f ${{ vars.PRODUCTION_URL }}/api/v1/health
          # curl -f ${{ vars.PRODUCTION_URL }}/api/v1/status

  notify-success:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-production, create-version]
    if: success()
    
    steps:
      - name: Deployment Success
        run: |
          echo "üéâ Production deployment successful!"
          echo "üì¶ Version: ${{ needs.create-version.outputs.version }}"
          echo "üîó Production URL: ${{ vars.PRODUCTION_URL }}"
          
      # Slack/Email notification:
      # - name: Send Slack notification
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: custom
      #     custom_payload: |
      #       {
      #         "text": "‚úÖ Production Deployment Successful!",
      #         "attachments": [{
      #           "color": "good",
      #           "fields": [
      #             { "title": "Version", "value": "${{ needs.create-version.outputs.version }}", "short": true },
      #             { "title": "Environment", "value": "Production", "short": true },
      #             { "title": "Deployed by", "value": "${{ github.actor }}", "short": true }
      #           ]
      #         }]
      #       }
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  notify-failure:
    name: Notify Deployment Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, create-version]
    if: failure()
    
    steps:
      - name: Deployment Failure
        run: |
          echo "‚ùå Production deployment failed!"
          echo "üì¶ Version: ${{ needs.create-version.outputs.version }}"
          echo "üîÑ Consider rollback procedure"
          
      # Rollback √∂rneƒüi:
      # - name: Auto Rollback
      #   run: |
      #     ssh user@${{ secrets.PRODUCTION_SERVER_HOST }} << 'EOF'
      #       cd /app/kipyo-backend
      #       ROLLBACK_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep rollback | head -1)
      #       docker tag $ROLLBACK_IMAGE kipyo-backend:latest
      #       docker-compose up -d backend
      #     EOF
